syntax = "proto3";

package auth.v1;

import "profile/v1/profile.proto";
import "google/protobuf/timestamp.proto";

/**
 * FlockAuthService is responsible for user authentication flows:
 * registering, logging in, logging out, and validating tokens.
 *
 * Error Codes (common examples, actual usage may vary by implementation):
 * - INVALID_ARGUMENT: If required fields are missing or malformed
 * - ALREADY_EXISTS: If registering with a username that is taken
 * - UNAUTHENTICATED: If credentials are invalid (login) or token is missing/invalid
 * - PERMISSION_DENIED: If token is valid but lacks required permissions
 * - FAILED_PRECONDITION: If token is blacklisted or expired
 */
service FlockAuthService {
  /**
   * Registers a new user in the system.
   */
  rpc Register(RegisterRequest) returns (RegisterResponse);

  /**
   * Logs in an existing user, returning a valid JWT token if successful.
   */
  rpc Login(LoginRequest) returns (LoginResponse);

  /**
   * Logs out the currently authenticated user.
   */
  rpc Logout(LogoutRequest) returns (LogoutResponse);

  /**
   * Validates a JWT token and returns the associated claims if valid.
   * This is used by other services to verify authentication.
   */
  rpc Validate(ValidateRequest) returns (ValidateResponse);
}

/**
 * Request to register a new user.
 */
message RegisterRequest {
  /**
   * Client-supplied request ID for idempotent registration, allowing the server
   * to return the same result if this request is retried.
   */
  optional string request_id = 1;

  /**
   * Desired username for the new account.
   * Must be unique and non-empty.
   */
  string username = 2;

  /**
   * Raw password for the new account, subject to the system's password policy.
   */
  string password = 3;
}

/**
 * Response returned after registering a user.
 */
message RegisterResponse {
  /**
   * The newly created user resource containing basic profile info.
   */
  profile.v1.User user = 1;

  /**
   * A JWT token to use in subsequent authenticated calls.
   * Treat this as an opaque string on the client side.
   */
  string jwt_token = 2;
}

/**
 * Request to log in with existing credentials.
 */
message LoginRequest {
  /**
   * The user's username, must match a registered account.
   */
  string username = 1;

  /**
   * The user's password for authentication.
   */
  string password = 2;
}

/**
 * Response returned after a successful login.
 */
message LoginResponse {
  /**
   * The user resource, useful for displaying user info client-side.
   */
  profile.v1.User user = 1;

  /**
   * A valid JWT token that the user must send in subsequent requests.
   */
  string jwt_token = 2;
}

/**
 * Request to log out the current user.
 * Typically requires an authentication token (JWT) in headers.
 */
message LogoutRequest {}

/**
 * Response confirming a successful logout.
 */
message LogoutResponse {}

/**
 * Request to validate a JWT token.
 */
message ValidateRequest {
  /**
   * The JWT token to validate.
   */
  string jwt_token = 1;
}

/**
 * Response containing the validation result and token claims.
 */
message ValidateResponse {
  /**
   * The validation status of the token.
   */
  TokenStatus status = 1;

  /**
   * The claims from the token, only present if status is VALID.
   */
  TokenClaims claims = 2;

  /**
   * Optional error details if the token is invalid.
   */
  optional string error_details = 3;

  /**
   * When this token will expire, if it's valid.
   */
  optional google.protobuf.Timestamp expires_at = 4;
}

/**
 * The status of a token validation request.
 */
enum TokenStatus {
  /**
   * Default value, should never be used.
   */
  TOKEN_STATUS_UNSPECIFIED = 0;

  /**
   * Token is valid and not expired.
   */
  TOKEN_STATUS_VALID = 1;

  /**
   * Token has expired.
   */
  TOKEN_STATUS_EXPIRED = 2;

  /**
   * Token signature is invalid.
   */
  TOKEN_STATUS_INVALID_SIGNATURE = 3;

  /**
   * Token has been added to the denylist.
   */
  TOKEN_STATUS_DENYLISTED = 4;

  /**
   * Token format is invalid.
   */
  TOKEN_STATUS_MALFORMED = 5;
}

/**
 * Claims extracted from a valid JWT token.
 */
message TokenClaims {
  /**
   * The user ID from the token.
   */
  string user_id = 1;

  /**
   * The username from the token.
   */
  string username = 2;

  /**
   * When the token was issued.
   */
  google.protobuf.Timestamp issued_at = 3;

  /**
   * Optional roles/scopes associated with the token.
   */
  repeated string scopes = 4;

  /**
   * Optional session ID for token denylisting.
   */
  optional string session_id = 5;
}

---
description: Default rule applied to all files and requests
globs: *
---

# Default Rule

This rule provides default guidance that should be considered for all files and requests in the project.

<rule>
name: default-rule
description: Default standards and considerations that apply project-wide

filters:
  # Match all files
  - type: file_extension
    pattern: ".*"

actions:
  - type: suggest
    message: |
      When working with any files in this project:

      1. **Cursor Rules Management**:
         - When creating or updating cursor rules:
           - Follow location standards in `.cursor/rules/`
           - Specifically, consider `.cursor/rules/cursor-rule-evolution.mdc`, `.cursor/rules/cursor-rules-guidance.mdc`, and `.cursor/rules/cursor-rule-locations.mdc`
           - Use proper rule structure and sections
           - Consider rule evolution triggers
           - Document changes in evolution history
         - Reference existing cursor rules for patterns
         - Maintain consistent rule versioning
         - List all available rules using `ls .cursor/rules`

      2. **Project-wide Code Quality and Productivity**:
         - **Mandatory Code Checks**:
           - After any code changes, you must run the checks defined in
             [code-quality-checks.mdc](mdc:code-quality-checks.mdc).
             - This ensures formatting, linting, and testing are up-to-date and pass before merging.
           - All new or modified Go code should follow
             [go-design-practices.mdc](mdc:go-design-practices.mdc) for structure, error handling, and idiomatic design.
           - Unit tests should comply with
             [go-unit-testing.mdc](mdc:go-unit-testing.mdc) guidelines (table-driven tests, clear error messages, good coverage).
         - **Microservices & Architecture**:
           - If you are adding or modifying a microservice, consult
             [go-microservice-template.mdc](mdc:go-microservice-template.mdc) and
             [microservices-design.mdc](mdc:microservices-design.mdc) for domain-driven decomposition, data isolation, and recommended folder structure.
         - **Productivity Techniques**:
           - Use scratchpads for exploratory work or brainstorming as described in
             [scratchpad-management.mdc](mdc:scratchpad-management.mdc). This keeps half-baked prototypes out of production code until proven.
           - Document any new lessons learned in
             [adaptive-learning.mdc](mdc:adaptive-learning.mdc), so the entire team can benefit from fresh insights and patterns.

      3. **Documentation and Notes**:
         - When creating or updating any documentation, follow the guidance in
           @documentation-management.mdc.
         - Maintain all technical notes and design discussions in `.cursor/notes/`, keeping them organized by domain (e.g., `/backend/server`, `/frontend`, etc.).
         - If you introduce a new technology or significantly change an existing design, be sure to add or update a note under `.cursor/notes/`.
         - Keep docs brief yet comprehensive: future contributors should have all the context needed to understand design decisions.
         - Regularly review and update documentation so it remains accurate over time.

      4. **General Guidelines**:
         This section will expand to include:
         - Project-wide conventions
         - Common patterns
         - Standard practices
         - Cross-cutting concerns

      5. **Tooling and Automation Insights**:
         - Explore the tools available in the `.cursor/tools/` directory to automate routine tasks and improve workflow efficiency.
         - **Examples include**:
           - **new-scratchpad.sh**: Quickly create new scratchpad files for experimental work.
           - Other custom scripts that aid in code review, dependency management, and environment setup.
         - Integrate these tools into your daily workflow to enforce standards and reduce manual effort.
         - Regularly review [tool-usage.mdc](mdc:tool-usage.mdc) for detailed guidelines on using and creating tools.
         - Consider leveraging automated tools for code formatting, linting, testing, and deployment to maintain consistent, high-quality code across the project.

      6. **Future Extensibility**:
         Additional sections can be added here for:
         - New project-wide standards
         - Common requirements
         - Best practices
         - Security considerations
         - Performance guidelines

examples:
  - input: |
      # Any file modification or creation
      src/example.ts
      .cursor/rules/new-rule.mdc
    output: "Apply default guidelines and cursor rule management where applicable"

metadata:
  priority: critical
  version: 1.0.0
  evolution_history:
    - date: "2024-03-21"
      type: "initial"
      description: "Initial version of default project-wide rule"
    - date: "2024-03-21"
      type: "update"
      description: "Updated version number to follow semantic versioning MAJOR.MINOR.PATCH format"
    - date: "2024-03-21"
      type: "update"
      description: "Added information about listing rules using ls command"
</rule> 
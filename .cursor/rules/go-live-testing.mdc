---
description: Guidelines for Go development and gRPC live testing practices
globs: *.go
---

# Go Development and gRPC Testing Practices

<rule>
name: go-live-testing
description: Defines standards for Go development workflow and gRPC testing practices

filters:
  - type: file_extension
    pattern: "\\.go$"
  - type: directory
    pattern: ".*service.*"

actions:
  - type: suggest
    message: |
      When working with Go microservices:

      1. **gRPC Testing and Introspection**:
         - Prefer `grpcurl` for testing deployed gRPC services
         - Always use introspection to understand service and message definitions
         - Document all gRPC endpoints with example `grpcurl` commands
         - Test both success and error scenarios

         **Service Discovery and Health Checks**:
         ```bash
         # List all available services
         grpcurl --plaintext localhost:8080 list

         # Check service health
         grpcurl --plaintext localhost:8080 grpc.health.v1.Health/Check
         ```

         **Service Introspection**:
         ```bash
         # Describe a service and its methods
         grpcurl --plaintext localhost:8080 describe service.v1.ServiceName

         # Real example - describing the Health service
         grpcurl --plaintext localhost:8080 describe grpc.health.v1.Health
         ```

         **Message Template Inspection**:
         ```bash
         # Get the message template for a request type
         grpcurl -msg-template --plaintext localhost:8080 describe service.v1.RequestType

         # Real example - get health check request template
         grpcurl -msg-template --plaintext localhost:8080 describe .grpc.health.v1.HealthCheckRequest
         ```

         **Making Requests**:
         ```bash
         # Make a request with data
         grpcurl -d '{"field": "value"}' --plaintext localhost:8080 service.v1.ServiceName/MethodName

         # Real example - health check
         grpcurl --plaintext localhost:8080 grpc.health.v1.Health/Check
         ```

         **Best Practices**:
         1. Always inspect message templates before making requests
         2. Use service description to understand available methods
         3. Document example requests and responses in service README
         4. Include both success and error case examples
         5. Use `-msg-template` flag to understand required fields

examples:
  - input: |
      func main() {
        // Server setup
      }
    output: "Remember to test this endpoint using grpcurl once deployed. Start by describing the service: grpcurl --plaintext localhost:8080 describe ServiceName"
  - input: |
      // Handler implementation
      func (s *Server) CreateResource(ctx context.Context, req *pb.CreateResourceRequest) (*pb.CreateResourceResponse, error) {
        // Implementation
      }
    output: "Document the following grpcurl commands in your README:\n1. Message template: grpcurl -msg-template --plaintext localhost:8080 describe .ServiceName.CreateResourceRequest\n2. Example request: grpcurl -d '{...}' --plaintext localhost:8080 ServiceName/CreateResource"

metadata:
  priority: medium
  version: 2.0.0
  evolution_history:
    - date: "2024-03-21"
      type: "initial"
      description: "Initial version defining Go development and testing practices"
    - date: "2024-03-21"
      type: "update"
      description: "Enhanced grpcurl documentation with real introspection examples"
    - date: "2024-03-21"
      type: "update"
      description: "Updated version number to follow semantic versioning MAJOR.MINOR.PATCH format"
    - date: "2024-03-21"
      type: "update"
      description: "Added comprehensive unit testing best practices and examples"
    - date: "2024-03-21"
      type: "update"
      description: "Split file into separate gRPC and unit testing rules"
</rule> 